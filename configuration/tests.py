from django.core.exceptions import ValidationError
from django.test import TestCase

from .models import Provider, Service, Template


class TemplateModelTests(TestCase):
    def test_variables_are_extracted_from_template_body(self):
        body = "Hello {{ user.name }}, your OTP is {{ otp }}. {{ otp }} expires at {{ expires_at }}."
        t = Template.objects.create(
            title="OTP Email",
            subject="Your OTP",
            template=body,
        )
        self.assertEqual(t.title, "OTP Email")
        # Ensure variables are unique and in first-seen order
        self.assertEqual(t.variables, ["user.name", "otp", "expires_at"])


class ServiceModelTests(TestCase):
    def setUp(self):
        self.provider, _ = Provider.objects.get_or_create(code="mailgun", defaults={"name": "Mailgun", "type": "email"})

    def test_create_service_with_templates_one_to_many(self):
        svc = Service.objects.create(
            name="MyApp",
            api_key="secret",
            provider=self.provider,
            config={"api_key": "mailgun_secret", "base_url": "https://api.mailgun.net/", "username": "api"},
        )
        t1 = Template.objects.create(title="Welcome", subject="Hi", template="Hello {{ user }}", service=svc)
        t2 = Template.objects.create(title="Reset", subject="Reset", template="Reset {{ token }}", service=svc)
        self.assertTrue(svc.enabled)
        self.assertEqual(svc.config["api_key"], "mailgun_secret")
        self.assertEqual(svc.provider.code, "mailgun")
        self.assertEqual(svc.templates.count(), 2)
        # Ensure each template points back to the service
        self.assertEqual(t1.service, svc)
        self.assertEqual(t2.service, svc)

    def test_service_auto_generates_api_key_and_expiry_when_missing(self):
        svc = Service.objects.create(
            name="AutoKeyApp",
            provider=self.provider,
            config={"api_key": "autogenerated_ok"},
        )
        # api_key should be generated with svc_ prefix and 32 total length
        self.assertTrue(svc.api_key.startswith("svc_"))
        self.assertEqual(len(svc.api_key), 32)
        # api_expires_on should be set about 365 days in the future (allow 1 day jitter)
        from datetime import timedelta

        from django.utils import timezone

        now = timezone.now()
        self.assertIsNotNone(svc.api_expires_on)
        # It should be between 364 and 366 days from now to be robust
        delta = svc.api_expires_on - now
        self.assertTrue(timedelta(days=364) <= delta <= timedelta(days=366))


class ServiceConfigValidationTests(TestCase):
    def setUp(self):
        self.provider, _ = Provider.objects.get_or_create(code="mailgun", defaults={"name": "Mailgun", "type": "email"})

    def test_invalid_config_raises_validation_error(self):
        # Missing required 'api_key' should fail validation against MailgunEmail schema
        with self.assertRaises(ValidationError):
            Service.objects.create(
                name="BadService",
                provider=self.provider,
                config={"region": "us"},
            )
